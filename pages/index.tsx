import Head from "next/head";
import styles from "../styles/Home.module.scss";
import Header from "../components/Header";
import React, { useCallback } from "react";
import CustomTable from "../components/CustomTable";
import { TableHeader } from "../lib/interface";
import { useRouter } from "next/router";
import { useSelector } from "react-redux";
import { selectAuthState } from "../store/authSlice";
import { useEffect, useState } from "react";
import { Button, Card, Container, Grid } from "@mui/material";
import { useGetKeyWords } from "../services/keywords";
import PaginationComponent from "../components/PaginationComponent";
import SearchFilterForm from "../components/form/SearchFilterForm";
import { Box } from "@mui/system";
import DialogComponent from "../components/DialogComponent";
import { apiClient } from "../lib/httpClient";

interface KeywordDto {
  id: string;
  keyword: string;
  totalAdsword: number;
  totalLink: number;
  totalSerachResutls: number;
  htmlSource: string;
}

export default function Home() {
  const router = useRouter();
  const query = router.query;
  const [isOpen, setOpen] = useState<boolean>(false);
  const [showUpload, setShowUploadDialog] = useState<boolean>(false);
  const [uploadedFile, setUploadedFile] = useState<File | undefined>(undefined);
  const [createObjectURL, setCreateObjectURL] = useState<string | undefined>(
    undefined
  );
  const [htmlSource, setHtmlSource] = useState<string | undefined>(undefined);
  const authState = useSelector(selectAuthState);
  const handleLinkClick = (data: unknown) => {
    const keyword = data as KeywordDto;
    setOpen(true);
    setHtmlSource(keyword.htmlSource);
  };

  const headers: TableHeader[] = [
    {
      name: "id",
      title: "#Id",
      align: "left",
      type: "text",
    },
    {
      name: "name",
      title: "#Keyword",
      align: "left",
      type: "block",
    },
    {
      name: "adsWordCount",
      title: "Ads Word Count",
      align: "left",
      type: "text",
    },
    {
      name: "linkCount",
      title: "Link Count",
      align: "left",
      type: "text",
    },
    {
      name: "searchResultCount",
      title: "Search Results",
      align: "left",
      type: "text",
    },
    {
      name: "View",
      title: "Action",
      align: "left",
      type: "action",
      action: handleLinkClick,
    },
  ];
  useEffect(() => {
    if (!authState.isAuthenticated) {
      router.push("/sign-in");
    }
  }, [authState, router]);
  const {
    data: keywords,
    error,
    isValidating,
  } = useGetKeyWords({
    keyword: query.keyword as string,
    page: query.page as unknown as number,
    limit: 10,
  });
  const uploadToClient = useCallback(
    (event: React.ChangeEvent<HTMLInputElement>) => {
      if (event?.target.files && event.target.files[0]) {
        const i = event.target.files[0];
        console.log("file", event?.target.files[0]);
        setUploadedFile(i);
        setCreateObjectURL(URL.createObjectURL(i));
      }
    },
    []
  );
  const uploadToServer = async () => {
    console.log("uploadFile", uploadedFile);
    const body = new FormData();
    body.append("keywords", uploadedFile as Blob);
    const url = "/keywords/upload-file";
    apiClient(
      process.env.NEXT_PUBLIC_API_URL,
      authState.accessToken as string,
      true
    )
      .post(url, body)
      .then((data) => {
        const response = data.data?.data;
        console.log("response", response);
      })
      .catch((error) => {
        console.log("error", error);
      });
  };
  const handlePaginationChange = (value: number) => {
    const qParams: { page?: string } = {};
    if (value) {
      qParams.page = value.toString();
    } else {
      delete query.page;
    }
    const urlSearchParams = { ...query, ...qParams } as Record<string, string>;
    void router.replace({
      pathname: location.pathname,
      search: new URLSearchParams(urlSearchParams).toString(),
    });
  };
  return (
    <>
      <Head>
        <title>Google Scrapper</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <main className={styles.main}>
        <Grid
          container
          justifyContent={"space-between"}
          alignItems="center"
          my={2}
        >
          <Grid item xs={8} md={8}>
            <Box
              sx={{
                display: "flex",
                alignContent: "center",
                alignItems: "center",
                py: 3,
                px: 2,
              }}
            >
              <SearchFilterForm
                initialValues={{ keyword: "" }}
                placeholder="Type your search Keyword here ..."
              />
            </Box>
          </Grid>
          <Grid item xs={2} md={2}>
            <Button
              variant="contained"
              type="button"
              fullWidth
              // disabled={isLoading}
              onClick={() => setShowUploadDialog(true)}
            >
              Upload
            </Button>
          </Grid>
        </Grid>

        <CustomTable
          headers={headers}
          isLoading={isValidating}
          data={(keywords?.items as unknown as Record<string, unknown>[]) || []}
        />

        <PaginationComponent
          count={keywords ? keywords?.meta.totalPages : 0}
          current={keywords ? keywords.meta.currentPage : 1}
          size="medium"
          onChange={handlePaginationChange}
        />
        <DialogComponent
          isOpen={isOpen}
          title="HTML SOurce"
          onClose={() => {
            setOpen(false);
          }}
        >
          <Card>
            <div dangerouslySetInnerHTML={{ __html: htmlSource || "" }}></div>
          </Card>
        </DialogComponent>
        <DialogComponent
          isOpen={showUpload}
          title="Upload Key Word File"
          onClose={() => {
            setShowUploadDialog(false);
          }}
        >
          <input type="file" name="myImage" onChange={uploadToClient} />
          <Button
            variant="contained"
            type="button"
            fullWidth
            onClick={() => uploadToServer()}
          >
            Send to server
          </Button>
        </DialogComponent>
      </main>
    </>
  );
}
